---
- name: Set variables to indicate whether to generate private key or CSR
  ansible.builtin.set_fact:
    _cert_generate_csr: "{{ cert_force_regenerate }}"

- name: Check existing certificate
  when:
    - not _cert_generate_csr
  block:
    - name: Ensure existing certificate is not expired or about to expire (file)
      when:
        - cert_existing_certificate_type == 'file'
      block:
        - name: Get certificate content
          ansible.builtin.slurp:
            src: "{{ cert_certificate_path }}"
          register: _cert_data

        - name: Check existing certificate information
          when:
            - _cert_data.content is defined
          delegate_to: localhost
          community.crypto.x509_certificate_info:
            content: "{{ _cert_data.content | b64decode }}"
            valid_at:
              point_1: "+0d"
              point_2: "+{{ cert_regenerate_days }}d"
          register: _cert_existing

        - name: Set variable to indicate whether to generate CSR
          when:
            - not _cert_existing.valid_at.point_1 or
              not _cert_existing.valid_at.point_2
          ansible.builtin.set_fact:
            _cert_generate_csr: true
      rescue:
        - name: Set variable to indicate whether to generate CSR
          ansible.builtin.set_fact:
            _cert_generate_csr: true

    - name: Ensure existing certificate is not expired or about to expire (pipe)
      when:
        - cert_existing_certificate_type == 'pipe'
        - cert_existing_certificate_content is defined
      block:
        - name: Check existing certificate information
          delegate_to: localhost
          community.crypto.x509_certificate_info:
            content: "{{ cert_existing_certificate_content }}"
            valid_at:
              point_1: "+0d"
              point_2: "+{{ cert_regenerate_days }}d"
          register: _cert_existing

        - name: Set variable to indicate whether to generate CSR
          when:
            - not _cert_existing.valid_at.point_1 or
              not _cert_existing.valid_at.point_2
          ansible.builtin.set_fact:
            _cert_generate_csr: true
      rescue:
        - name: Set variable to indicate whether to generate CSR
          ansible.builtin.set_fact:
            _cert_generate_csr: true

    - name: Ensure CSR is generated when no existing certificate exists (pipe)
      when:
        - cert_existing_certificate_type == 'pipe'
        - cert_existing_certificate_content is not defined
      ansible.builtin.set_fact:
        _cert_generate_csr: true

- name: Generate private key and CSR
  when:
    - _cert_generate_csr
  block:
    - name: Backup private key, if it exists
      when:
        - cert_backup_replaced_private_key
        - cert_private_key_to_file
      block:
        - name: Check if there is existing private key
          ansible.windows.win_stat:
            path: "{{ cert_private_key_path }}"
          register: _cert_existing_priv_key

        - name: Backup private key
          when:
            - _cert_existing_priv_key.stat.exists
          ansible.windows.win_copy:
            remote_src: true
            src: "{{ cert_private_key_path }}"
            dest: "{{ cert_private_key_path }}.bak"

    - name: Generate private key
      delegate_to: localhost
      community.crypto.openssl_privatekey_pipe:
        passphrase: "{{ cert_private_key_passphrase | default(omit) }}"
        type: "{{ cert_private_key_type }}"
        size: "{{ _cert_private_key_size }}"
        curve: "{{ _cert_private_key_curve }}"
      register: _cert_new_private_key

    - name: Set private key content variable
      when:
        - cert_private_key_to_variable
      ansible.builtin.set_fact:
        cert_private_key_content: "{{ _cert_new_private_key.privatekey }}"

    - name: Copy private key to path
      when:
        - cert_private_key_to_file
      ansible.windows.win_copy:
        content: "{{ _cert_new_private_key.privatekey }}"
        dest: "{{ cert_private_key_path }}"

    - name: Generate CSR
      delegate_to: localhost
      community.crypto.openssl_csr_pipe:
        privatekey_content: "{{ _cert_new_private_key.privatekey }}"
        privatekey_passphrase: "{{ cert_private_key_passphrase | default(omit) }}"
        common_name: "{{ cert_common_name }}"
        subject_alt_name: "{{ cert_subject_alternative_names }}"
        organization_name: "{{ cert_organization_name | default(omit) }}"
        organizational_unit_name: "{{ cert_organizational_unit_name | default(omit) }}"
        locality_name: "{{ cert_locality_name | default(omit) }}"
        state_or_province_name: "{{ cert_state_or_province_name | default(omit) }}"
        country_name: "{{ cert_country_name | default(omit) }}"
        key_usage: "{{ cert_key_usage }}"
        key_usage_critical: "{{ cert_key_usage_critical }}"
        extended_key_usage: "{{ cert_extended_key_usage }}"
        extended_key_usage_critical: "{{ cert_extended_key_usage_critical }}"
        basic_constraints: "{{ cert_basic_constraints }}"
        basic_constraints_critical: "{{ cert_basic_constraints_critical }}"
      register: _cert_csr

    - name: Set CSR content variable
      ansible.builtin.set_fact:
        cert_csr_content: "{{ _cert_csr.csr }}"
