---
- name: Gather OS facts
  when:
    - ansible_distribution is not defined or
      ansible_distribution_major_version is not defined or
      ansible_distribution_release is not defined or
      ansible_distribution_version is not defined or
      ansible_os_family is not defined
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution
      - distribution_major_version
      - distribution_release
      - distribution_version
      - os_family

- name: Include OS specific variables
  ansible.builtin.include_vars: "{{ _file }}"
  vars:
    _file: "{{ lookup('first_found', _params) }}"
    _params:
      files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_release | default('') }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family }}.yml"
        - fallback.yml
      paths:
        - "{{ role_path }}/vars"

- name: Validate OS is supported
  ansible.builtin.assert:
    that:
      - _cert_os_is_supported
    fail_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is not supported."
    success_msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} is from a supported OS family."

- name: Indicate OS is tested
  when:
    - _cert_os_is_tested
  ansible.builtin.debug:
    msg: "{{ ansible_distribution }} {{ ansible_distribution_version }} has been tested with this role."

- name: Warn if OS is not tested
  when:
    - not _cert_os_is_tested
  ansible.builtin.debug:
    msg: "WARNING: {{ ansible_distribution }} {{ ansible_distribution_version }} is not tested."
  changed_when: true

- name: Get OS user data
  when:
    - ansible_os_family != 'Windows'
  ansible.builtin.getent:
    database: passwd
    split: ':'

- name: Get OS group data
  when:
    - ansible_os_family != 'Windows'
  ansible.builtin.getent:
    database: group
    split: ':'

- name: Validate private key owner user exists
  when:
    - ansible_os_family != 'Windows'
    - cert_private_key_to_file
  ansible.builtin.assert:
    that:
      - cert_private_key_owner in getent_passwd.keys()
    fail_msg: "User '{{ cert_private_key_owner }}' does not exist."
    success_msg: "User '{{ cert_private_key_owner }}' exists."

- name: Validate private key group exists
  when:
    - ansible_os_family != 'Windows'
    - cert_private_key_to_file
  ansible.builtin.assert:
    that:
      - cert_private_key_group in getent_group.keys()
    fail_msg: "Group '{{ cert_private_key_group }}' does not exist."
    success_msg: "Group '{{ cert_private_key_group }}' exists."

- name: Validate certificate path is defined
  when:
    - cert_existing_certificate_type == 'file'
  ansible.builtin.assert:
    that:
      - cert_certificate_path is defined
    fail_msg: Certificate path is not defined.
    success_msg: Certificate path is defined.

- name: Validate private key path is defined
  when:
    - cert_private_key_to_file
  ansible.builtin.assert:
    that:
      - cert_private_key_path is defined
    fail_msg: Private key path is not defined.
    success_msg: Private key path is defined.

- name: Validate RSA private key size
  when:
    - cert_private_key_type == 'RSA'
  ansible.builtin.assert:
    that:
      - cert_private_key_size | int > 512
    fail_msg: RSA private key size must be greater than 512.
    success_msg: RSA private key size is valid.

- name: Validate DSA private key size
  when:
    - cert_private_key_type == 'DSA'
  ansible.builtin.assert:
    that:
      - cert_private_key_size | int in _cert_allowed_dsa_key_sizes
    fail_msg: "DSA private key size is not valid. Valid sizes are: {{ _cert_allowed_dsa_key_sizes | join(', ') }}"
    success_msg: DSA private key size is valid.

- name: Validate Subject Alternative Name
  loop: "{{ cert_subject_alternative_names }}"
  ansible.builtin.assert:
    that:
      - item | regex_search('^(dirName|DNS|email|IP|RID|otherName|URI):')
    fail_msg: "Subject Alternative Name '{{ item }}' is not valid."
    success_msg: "Subject Alternative Name '{{ item }}' is valid."

- name: Validate that private key is being output
  ansible.builtin.assert:
    that:
      - cert_private_key_to_file or cert_private_key_to_variable
    fail_msg: Private key must be output to a file, to a variable, or both.
    success_msg: Private key is being output.

- name: Clear CSR content variable
  ansible.builtin.set_fact:
    cert_csr_content: ''

- name: Clear private key content variable
  when:
    - cert_private_key_to_variable
  ansible.builtin.set_fact:
    cert_private_key_content: ''
