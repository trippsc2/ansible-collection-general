---
- name: Gather OS Facts
  when:
    - ansible_os_family is not defined
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution
      - os_family

- name: Validate OS
  ansible.builtin.assert:
    that:
      - ansible_os_family not in _rotate_unsupported_os_families
    fail_msg: "This role does not support '{{ ansible_os_family }}' OS family. If you think this is a mistake, please open an issue on GitHub."
    success_msg: "The '{{ ansible_os_family }}' OS family is not unsupported. Only Debian and RedHat OS families are being tested with this role."

- name: Get passwd data
  become: true
  ansible.builtin.getent:
    database: passwd
    split: ':'

- name: Ensure user exists
  ansible.builtin.assert:
    that:
      - rotate_user in getent_passwd.keys()
    fail_msg: "User '{{ rotate_user }}' does not exist."
    success_msg: "User '{{ rotate_user }}' exists."

- name: Gather current time
  ansible.builtin.setup:
    gather_subset:
      - '!all'
      - '!min'
      - date_time

- name: Set initial value for variable to indicate password must be rotated
  ansible.builtin.set_fact:
    _rotate_password_must_be_rotated: "{{ rotate_force_password_change }}"

- name: Validate HashiCorp Vault variables
  when:
    - rotate_use_vault
  block:
    - name: Validate HashiCorp Vault mount point is defined
      ansible.builtin.assert:
        that:
          - rotate_vault_mount_point is defined
        fail_msg: "The 'rotate_vault_mount_point' variable is not defined."
        success_msg: "The 'rotate_vault_mount_point' variable is defined."

    - name: Create HashiCorp Vault mount point
      when:
        - rotate_create_vault_mount_point
      delegate_to: localhost
      trippsc2.hashi_vault.vault_kv2_secret_engine:
        token: "{{ vault_token | default(omit) }}"
        url: "{{ vault_url | default(omit) }}"
        engine_mount_point: "{{ rotate_vault_mount_point }}"
        state: present

    - name: Validate Vault secret path is defined
      ansible.builtin.assert:
        that:
          - rotate_vault_secret_path is defined
        fail_msg: "The 'rotate_vault_secret_path' variable is not defined."
        success_msg: "The 'rotate_vault_secret_path' variable is defined."

    - name: Lookup existing secret in Vault
      when:
        - not _rotate_password_must_be_rotated
      block:
        - name: Get KV2 secret
          delegate_to: localhost
          community.hashi_vault.vault_kv2_get:
            token: "{{ vault_token | default(omit) }}"
            url: "{{ vault_url | default(omit) }}"
            engine_mount_point: "{{ rotate_vault_mount_point }}"
            path: "{{ rotate_vault_secret_path }}"
          register: _rotate_vault_secret

        - name: Get difference in time
          ansible.builtin.set_fact:
            _rotate_vault_secret_age: >-
              {{ (ansible_date_time.iso8601[:19] | to_datetime('%Y-%m-%dT%H:%M:%S') -
                  _rotate_vault_secret.data.metadata.created_time[:19] | to_datetime('%Y-%m-%dT%H:%M:%S')).seconds }}

        - name: Set variable to indicate password must be rotated
          when:
            - _rotate_vault_secret_age | int > rotate_period_in_seconds
          ansible.builtin.set_fact:
            _rotate_password_must_be_rotated: true
      rescue:
        - name: Set variable to indicate password must be rotated
          ansible.builtin.set_fact:
            _rotate_password_must_be_rotated: true

- name: Check if password must be rotated without Vault
  when:
    - not rotate_use_vault
    - not _rotate_password_must_be_rotated
  block:
    - name: Get shadow data
      become: true
      ansible.builtin.getent:
        database: shadow
        split: ':'
        key: "{{ rotate_user }}"

    - name: Get password last changed timestamp
      ansible.builtin.set_fact:
        _rotate_password_epoch: "{{ getent_shadow[rotate_user][1] | int * 86400 }}"

    - name: Get difference in time
      ansible.builtin.set_fact:
        _rotate_password_age: "{{ ansible_date_time.epoch | int - _rotate_password_epoch | int }}"

    - name: Set variable to indicate password must be rotated
      when:
        - _rotate_password_age | int > rotate_period_in_seconds
      ansible.builtin.set_fact:
        _rotate_password_must_be_rotated: true
